typename Ord = [| LT | GT | EQ |];
typename BinaryTree(key, value) = [| Node: (key, Maybe(value), BinaryTree(key, value), BinaryTree(key, value)) | Leaf |];

var emptyTree = Leaf;

fun treeInsert (key, value, compare, tree) {
  switch (tree) {
    case Leaf -> Node(key, Just(value), Leaf, Leaf)
    case Node(k, v, l, r) -> switch (compare(key, k)) {
      case EQ -> Node(k, Just(value), l, r)
      case LT -> Node(k, v, treeInsert(key, value, compare, l), r)
      case GT -> Node(k, v, l, treeInsert(key, value, compare, r))
    }
  }
}

fun treeFromList (kvps, compare) {
  fold_left(fun (t, kvp) { var (k, v) = kvp; treeInsert(k, v, compare, t) }, emptyTree, kvps)
}

fun treeToList (tree) {
  switch (tree) {
    case Leaf -> [ ]
    case Node(k, v, l, r) -> {
      fun filterJustToValue (xs) {
        switch (xs) {
          case [ ] -> [ ]
          case (k, Nothing) :: t -> filterJustToValue(t)
          case (k, Just(v)) :: t -> (k, v) :: filterJustToValue(t)
        }
      }
      filterJustToValue((k, v) :: treeToList(l) ++ treeToList(r))
    }
  }
}

fun treeMapValues (f, tree) {
  switch (tree) {
    case Leaf -> Leaf
    case Node(k, Nothing, l, r) -> Node(k, Nothing, treeMapValues(f, l), treeMapValues(f, r))
    case Node(k, Just(v), l, r) -> Node(k, Just(f(v)), treeMapValues(f, l), treeMapValues(f, r))
  }
}

fun treeForEachValue (f, tree) {
  switch (tree) {
    case Leaf -> ()
    case Node(k, Nothing, l, r) -> ()
    case Node(k, Just(v), l, r) -> {
      f(v);
      treeForEachValue(f, l);
      treeForEachValue(f, r);
    }
  }
}

fun treeLookup (key, compare, tree) {
  switch (tree) {
    case Leaf -> Nothing
    case Node(k, v, l, r) -> switch (compare(key, k)) {
      case EQ -> v
      case LT -> treeLookup(key, compare, l)
      case GT -> treeLookup(key, compare, r)
    }
  }
}

fun treeRemove (key, compare, tree) {
  switch (tree) {
    case Leaf -> Leaf
    case Node(k, v, l, r) -> switch (compare(key, k)) {
      case EQ -> Node(k, Nothing, l, r)
      case LT -> treeRemove(key, compare, l)
      case GT -> treeRemove(key, compare, r)
    }
  }
}

# Namer

typename Address = [Int];
typename AddressSource(e::Row) = () { |e}~> Address;

# Generate a fresh Address from an AddressSource
# @param {AddressSource}
# @returns {(Address, AddressSource)} Pair of the generated Address and an updated generator
fun makeAddr (source) {
  var address = source();
  (address, fun () { var h :: t = address; (h + 1) :: t })
}

fun makeSource (address) { fun () { 0 :: address } }

fun addrToString (addr) {
  switch (addr) {
    case [ ] -> error("Empty address")
    case (h :: t) -> fold_left(fun (prev, curr) { intToString(curr) ^^ "-" ^^ prev }, intToString(h), t)
  }
}

var initialSource = fun () { [ 0 ] } : AddressSource({ |e});


# Dispatcher

typename DispatcherMessage(i, o) =
 [| Deregister: Address
  | Ignore
  | Send: (o, Address)
  | Broadcast: o
  | Register: (Address, i)
  |];

typename Dispatcher(i, o) = Process ({ hear:DispatcherMessage(i, o), wild });

# Dispatcher handler
# Forward messages to their correct recipient(s)
# @param {[(Address, fun]} clients
# @returns {()}
fun dispatchFun (clients: BinaryTree(Address, (o) {:DispatcherMessage(%, o)|c}~> ())) client {
  fun addrComp (a, b) {
    switch ((a, b)) {
      case ([ ], [ ]) -> EQ
      case ([ ], _) -> LT
      case (_, [ ]) -> GT
      case (h1 :: t1, h2 :: t2) ->
        if (h1 == h2) addrComp(t1, t2)
        else if (h1 < h2) LT
        else GT
    }
  }

  receive {
    case Register(addr, send) -> { dispatchFun(treeInsert(addr, send, addrComp, clients)) }
    case Deregister(addr)  -> dispatchFun(treeRemove(addr, addrComp, clients))
    case Ignore -> dispatchFun(clients)
    case Send(msg, to) -> {
      switch (treeLookup(to, addrComp, clients)) {
        case Nothing -> ()
        case Just(send) -> send(msg)
      };
      dispatchFun(clients)
    }
    case Broadcast(msg) -> {
      treeForEachValue(fun (send) { send(msg) }, clients);
      dispatchFun(clients)
    }
  }
}

# Broadcast
op disp <! msg {
  disp ! (Broadcast(msg) : DispatcherMessage(i, o))
}

# Directed send
op disp <@ (msg, to: Address) {
  disp ! (Send(msg, to) : DispatcherMessage(i, o))
}


fun using (recp, plugin) {
  fun helper () {
    receive {
      case msg -> { recp ! plugin(msg); helper() }
    }
  }
  spawnClient { helper() }
}

fun log (logPrefix)(msg) { print(logPrefix ^^ " " ^^ show(msg)); msg }

fun spawnDispatcher () {
  spawnClient { dispatchFun(emptyTree) } `using` log("[Dispatcher]")
}


# Rendering

fun makeTag (name, attributes, content) {
  # makeXml(name, attributes, content)
  # TODO
  var id = fromJust(lookup("id", attributes));

  <div is="{ name }" id="{ id }">
    { content }
  </div>
}

# Resolve diff of two DOM (sub-)trees
# @param {DomNode} subject DOM Subtree to mutate into target state
# @param {Xml} targetState Xml representation the subject is to be in
# @returns {()}
fun resolveDOMDiff (subject, targetState) client {
  replaceNode(targetState, subject)
  # replaceChildrenInShadow(subject, targetState);
}

# Uselet

var nodeAddrPrefix = "_render_node_";

fun uselet (name, model, updt, view) {
  fun (addressSource, services, dispatcher) {

    var (addr, gen) = makeAddr(addressSource);
    var childGen = makeSource(addr);
    var id = nodeAddrPrefix ^^ addrToString(addr);

    fun send (msg) { dispatcher ! Send(msg, addr) }
    fun emit (msg) { dispatcher ! Broadcast(msg) }

    var updateWithServices = updt(services);

    fun hndlr (oldState) {
      receive {
        case msg -> {
          var newState = updateWithServices(oldState, msg);
          var (xml, _) = view(send)(newState)(childGen, services, dispatcher);
          var tag = makeTag(name, [("id", id)], xml);
          var currentDOM = getNodeById(id);
          resolveDOMDiff(currentDOM, tag);

          hndlr(newState)
        }
      }
    }

    var hndlr = spawnClient { hndlr(model) };
    dispatcher ! Register(addr, fun (msg) { hndlr ! msg });

    var (xml, _) = view(send)(model)(childGen, services, dispatcher);
    var tag = makeTag(name, [("id", id)], xml);
    (tag, gen)
  }
}

fun xmlUselet (xml) {
  fun (gen, _, _) { (xml, gen) }
}

fun textUselet (str) {
  fun (gen, _, _) { (stringToXml(str), gen) }
}

fun useletApp (name, child, servicesFn) {
  var dispatcher = spawnDispatcher();

  var services = servicesFn(dispatcher);

  var (xml, gen) = child(initialSource, services, dispatcher);
  (makeTag(name, [("id", "")], xml), gen) # TODO
}

op u1 <+> u2 {
  fun (addrSource, services, dispatcher) {
    var (xml1, gen1) = u1(addrSource, services, dispatcher);
    var (xml2, gen2) = u2(gen1, services, dispatcher);
    (<#>
      { xml1 }
      { xml2 }
    </#>, gen2)
  }
}

op xmlItem +> u {
  fun (addrSource, services, dispatcher) {
    var (xml, gen) = u(addrSource, services, dispatcher);
    (makeTag(xmlItem, [("id", "")], xml), gen) # TODO
  }
}







fun errorUselet (err) {
  xmlUselet(<#>
    <style>.error {{ color: rgb(192, 0, 0); border: thin solid rgb(192, 0, 0); background-color: rgba(255, 0, 0, 0.25); padding: .5rem; }}</style>
    <div class="error">{ err }</div>
  </#>)
}

typename ItemId = Int;
typename Item = (id: ItemId, body: String);
typename Error = String;

typename Model = (items: [Item], value: String);

typename ListMessage =
 [| Refresh
  | Data: [Item]
  | AddItem
  | AddSuccess: Item
  | DeleteItem: ItemId
  | DeleteSuccess: ItemId
  | APIError: String
  | ValueChanged: String
  |];

var db = database "uselet";

var listItemsTable = table "items"
  with Item
  where id readonly
  from db;

fun apiFun (disp) {
  receive {
    case _ -> apiFun(disp)
  }
}

fun spawnApiService (disp) {
  spawnClient { apiFun(disp) }
}

fun services(disp) {
  ( api = spawnApiService(disp) )
}

fun myApp () {
  var (app, _) = useletApp("myapp",
    kanbanUselet(kanbanOverview, kanbanBoardUselet(kanbanColumnUselet(kanbanCardUselet)))
  services);

  page
    <html>
      <head>
        <meta charset="utf-8" />
        <title>My App</title>
        <link rel="stylesheet" href="/css/style.css" />
      </head>
      <body>
        <header><h1>Kanban</h1></header>
        <main>
          { app }
        </main>
      </body>
    </html>
}


fun listItemUselet (str) {
  "li" +> textUselet(str)
}

fun fancyListItemUselet (str) {
  "li" +> xmlUselet(<span class="fancy">{ stringToXml(str) }</span>)
}


fun staticListUselet (items: [String]) {
  var us = for (i <- items) [ listItemUselet(i) ];
  if (length(us) < 1) { xmlUselet(<ul/>) }
  else if (length(us) == 1) { "ul" +> hd(us) }
  else {
    "ul" +> fold_left(fun (curr, prev) { curr <+> prev }, hd(us), tl(us))
  }
}



sig main : () ~> ()
fun main () {
  addStaticRoute("/css", "css", [
    ("css", "text/css")
  ]);

  addRoute("/u", fun (_, _) { myApp() });

  servePages()
}

main()
