open Uselet
open DbOps
open Util

fun kanbanRouter (route) {
  var splitRoute = splitAt('/', route);
  switch (splitRoute) {
    case [ "board" ] -> KanbanOverview
    case [ "board", id ] -> {
      if (isInt(id)) {
        KanbanBoard(stringToInt(id))
      } else {
        NavError404
      }
    }
    case _ -> NavError404
  }
}

fun kanbanRenderFun (ctx) (state) {
  xmlUselet(<header><h1 l:onclick="{ ctx.dispatcher <! (NavigateTo("board")) }">Kanban</h1></header>) <+>
  ("main" +>
    (switch (state) {
      case KanbanOverview -> kanbanOverviewUselet()
      case KanbanBoard(id) -> kanbanBoardUselet(kanbanColumnUselet(kanbanCardUselet))(id)
      case _ -> xmlUselet(<h1>Nope</h1>)
    })
  )
}

fun kanbanOverviewUselet () {
  var boards = getAllBoards();

  uselet(
    "kanbanoverview",
    boards,
    fun (context) (model, msg) {
      switch (msg) {
        case ShowOverview -> {
          context.services.nav ! Navigate(OverviewPage);
          model
        }
        case ShowBoard(id) -> {
          context.services.nav ! Navigate(BoardPage(id));
          model
        }
        case _ -> model
      }
    },
    fun (context) (model) {
      xmlUselet(<h2>Boards</h2>) <+> (
      "ul" +>
        fold_left(
          fun (a, b) { a <+> b },
          xmlUselet(<#/>),
          map(
            fun (board) {
              "li" +>
                xmlUselet(<span l:onclick="{ context.dispatcher <! (NavigateTo("board/" ^^ intToString(board.id))) }">{ stringToXml(board.name) }</span>)
            },
            model
          )
        )
      )
    }
  )
}

fun kanbanBoardUselet (columnUselet) (boardId) {
  var columns = reverse(getColumnsByBoard(boardId));
  var board = getBoardById(boardId);

  uselet(
    "kanbanboard",
    ( board = board, columns = columns),
    fun (ctx) (model, msg) {
      switch (msg) {
        case NewColCreated(col) -> {
          ctx.dispatcher <<! (CloseModal, ctx.self);
          ( model with columns = col :: model.columns )
        }
        case _ -> model
      }
    },
    fun (ctx) (model) {
      xmlUselet(<h3>{ stringToXml(model.board.name) }</h3>) <+>
      ("kanbancolumns" +> (
        fold_left(fun (a, b) { a <+> b }, xmlUselet(<#/>), map(fun (col) { columnUselet(col.id) }, model.columns)) <+>
        xmlUselet(<button l:onclick="{ ctx.dispatcher <<! (OpenModal, ctx.self) }">New Column</button>)
      )) <+>
      modalUselet("New Card", createNewColUselet(model.board.id))
    }
  )
}

fun kanbanColumnUselet (cardUselet) (columnId) {
  var column = getColumnById(columnId);
  var cards = getCardsByColumn(columnId);

  uselet(
    "kanbancol",
    ( cards = cards, column = column, currentDragSubject = Nothing ),
    fun (ctx) (model, msg) {
      switch (msg) {
        case RemoveCard(id) -> {
          deleteCard(id);
          ( model with cards = filter(fun (c) { c.id <> id }, cards) )
        }
        case NewCardCreated(card) -> {
          ctx.dispatcher <<! (CloseModal, ctx.self);
          ( model with cards = card :: model.cards )
        }
        case _ -> model
      }
    },
    fun (context) (model) {
      xmlUselet(<h4 class="board-col-head">{ stringToXml(model.column.name) }</h4>) <+>
      ("boardcolbody" +> fold_left(fun (a, b) { a <+> b }, xmlUselet(<#/>), map(fun (card) { cardUselet(card) }, model.cards))) <+>
      xmlUselet(<button l:onclick="{ context.dispatcher <<! (OpenModal, context.self) }"> New Card </button>) <+>
      modalUselet("New Card", createNewCardUselet(model.column.id))
    }
  )
}

fun kanbanCardUselet (card) {

  uselet(
    "kanbancard",
    ( edit = false, card = card ),
    fun (_) (model, msg) {
      switch (msg) {
        case UpdateHead(value) -> ( model with card = ( model.card with head = value ) )
        case UpdateBody(value) -> ( model with card = ( model.card with body = value ) )
        case ToggleEdit -> {
          if (model.edit) {
            updateCard(model.card)
          } else { () };
          ( model with edit = not(model.edit) )
        }
        case _ -> model
      }
    },
    fun (context) (model) {
      if (model.edit) {
        xmlUselet(
          <div class="kanban-card">
            <input
              type="text"
              name="head"
              value="{ model.card.head }"
              l:onkeyup="{ context.dispatcher <@ (UpdateHead(domGetPropertyFromRef(getTarget(event), "value")), context.self) }"
            />
            <input
              type="text"
              name="head"
              value="{ model.card.body }"
              l:onkeyup="{ context.dispatcher <@ (UpdateBody(domGetPropertyFromRef(getTarget(event), "value")), context.self) }"
            />
            <button l:onclick="{ context.dispatcher <@ (ToggleEdit, context.self) }">Finish</button>
          </div>
        )
      } else {
        xmlUselet(
          <div class="kanban-card">
            { if (strlen(model.card.head) > 0) {
              <h4 class="card-head">
                { stringToXml(model.card.head) }
              </h4>
            } else
              <#/>
            }
            { if (strlen(model.card.body) > 0) {
              <span class="card-body">
                { stringToXml(model.card.body) }
              </span>
            } else
              <#/>
            }
            <button l:onclick="{ context.dispatcher <@ (ToggleEdit, context.self) }">Edit</button>
            <button l:onclick="{ context.dispatcher <@ (RemoveCard(model.card.id), context.parent) }">X</button>
          </div>
        )
      }
    }
  )
}

fun modalUselet (title, content) {
  uselet(
    "modal",
    ( isOpen = false ),
    fun (context) (model, msg) {
      switch (msg) {
        case OpenModal -> ( model with isOpen = true )
        case CloseModal -> ( model with isOpen = false )
        case msg -> {
          context.dispatcher <@ (msg, context.parent);
          model
        }
      }
    },
    fun (context) (model) {
      if (model.isOpen) {
        "modalwrapper" +> (
          xmlUselet(<button class="modal-close-btn" l:onclick="{ context.dispatcher <@ (CloseModal, context.self) }"> X </button>) <+>
          ("div" +> (xmlUselet(if (strlen(title) > 0) <h4>{ stringToXml(title) }</h4> else <#/>) <+> content))
        ) <+>
        xmlUselet(<div class="modal-background" />)
      } else {
        xmlUselet(<#/>)
      }
    }
  )
}

fun createNewColUselet (boardId) {
  uselet(
    "createnewcol",
    ( name = "", error = "" ),
    fun (ctx) (model, msg) {
      switch (msg) {
        case UpdateName(name) -> if (strlen(name) > 0) {
          ( model with name = name, error = "" )
        } else {
          ( model with name = name, error = "Empty name not allowed" )
        }
        case CreateNewCol -> {
          createCol(model.name, boardId);
          ctx.dispatcher <@ (
            NewColCreated(( id = -1, name = model.name, index = -1, board = boardId )),
            ctx.parent
          );
          ( name = "", error = "" )
        }
        case _ -> model
      }
    },
    fun (ctx) (model) {
      xmlUselet(<#>
        <input
          type="text"
          value="{ model.name }"
          placeholder="Column name"
          l:onkeyup="{ ctx.dispatcher <@ (UpdateName(domGetPropertyFromRef(getTarget(event), "value")), ctx.self) }"
        />
        {
          if (strlen(model.error) > 0) {
            <span class="error">{ stringToXml(model.error) }</span>
          } else { <#/> }
        }
        <button l:onclick="{ ctx.dispatcher <@ (CreateNewCol, ctx.self) }">Create</button>
      </#>)
    }
  )
}

fun createNewCardUselet (colId) {
  uselet(
    "createnewcard",
    ( head = "", body = "" ),
    fun (ctx) (model, msg) {
      switch (msg) {
        case UpdateHead(head) -> ( model with head = head )
        case UpdateBody(body) -> ( model with body = body )
        case CreateNewCard -> {
          createCard(model.head, model.body, colId);
          ctx.dispatcher <@ (
            NewCardCreated(( head = model.head, body = model.body, column = colId, id = -1)),
            ctx.parent
          );
          ( head = "", body = "" )
        }
        case _ -> model
      }
    },
    fun (ctx) (model) {
      xmlUselet(<#>
        <input
          type="text"
          value="{ model.head }"
          l:onkeyup="{ ctx.dispatcher <@ (UpdateHead(domGetPropertyFromRef(getTarget(event), "value")), ctx.self) }"
        />
        <input
          type="text"
          value="{ model.body }"
          l:onkeyup="{ ctx.dispatcher <@ (UpdateBody(domGetPropertyFromRef(getTarget(event), "value")), ctx.self) }"
        />
        <button l:onclick="{ ctx.dispatcher <@ (CreateNewCard, ctx.self) }">Create</button>
      </#>)
    }
  )
}
