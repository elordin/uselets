# Framework definitions

typename Address = Int;
typename AddressSource = () {}~> Address;
# typename RendererMessage(model, msg) = [| Changed: (Uselet(model, msg), model) |];
# typename RenderFun(model, msg) = (model) {:RendererMessage(model, msg)}~> Xml;
# typename UpdateFun(model, msg) = (model, msg) {}~> model;
# typename Uselet(model, msg) = (
#   addr: Address,
#   name: String,
#   renderFun: RenderFun(model, msg),
#   updateFun: UpdateFun(model, msg),
#   model: model,
#   gen: AddressSource
# );

sig makeAddr : (AddressSource) {}~> (Address, AddressSource)
fun makeAddr (source) {
  var addr = source();
  (addr, fun () { addr + 1 })
}

var addressInit = fun () { 0 } : AddressSource;

fun dispatchFun (clients) client {
  receive {
    case Register(c)   -> { dispatchFun(c :: clients) }
    case Deregister(c) -> dispatchFun(filter(fun (x) { x <> c }, clients))
    case Ignore        -> dispatchFun(clients)
    case Dispatch(msg) -> {
      var tmp = for (c <- clients) [
        # if c accepts msg (by type)
        c ! msg
      ];
      dispatchFun(clients)
    }
  }
}

# var baseDispatcher = spawnClient { dispatchFun([ ]) };

op disp <! msg {
  disp ! Dispatch(msg)
}

fun using (disp, plugin) {
  fun helper () {
    receive {
      case msg -> { disp ! plugin(msg); helper() }
    }
  }

  spawnClient { helper() }
}

fun log (logPrefix) (msg) { print(logPrefix ^^ " " ^^ show(msg)); msg }

# var dispatcher = baseDispatcher `using` log("\x1b[33m[Dispatcher]\x1b[0m\t");

# fun emit (msg) client {
#   dispatcher <! msg
# }

sig makeTag : (String, [(String, String)], Xml) ~> Xml
fun makeTag (name, attributes, content) {
  var id = fromJust(lookup("id", attributes));

  <div id="{ id }">
    { content }
  </div>
}

sig getElementById : (String) ~> DomNode
fun getElementById (id) {
  getNodeById(id)
}

sig resolveDOMDiff : (DomNode, Xml) ~> ()
fun resolveDOMDiff (subject, targetState) {
  replaceNode(targetState, subject)
}

var nodeAddrPrefix = "_render_node_";

# sig rendererFun : () {:RendererMessage(model, msg)}~> ()
fun rendererFun () client {
  receive {
    case Changed(subject, model) -> {
      var id = nodeAddrPrefix ^^ intToString(subject.addr);
      var xml = subject.renderFun(model);
      var targetDOM = makeTag(subject.name, [("id", id)], xml);
      var currentDOM = getElementById(id);

      resolveDOMDiff(currentDOM, targetDOM);

      rendererFun()
    }
  }
}

# var renderer = spawnClient { rendererFun() };

# fun attach(subject) {
#   fun proxyFn (oldState) {
#     receive {
#       case msg -> {
#         var newState = subject.updateFun(oldState, msg);
#         # if (newState <> oldState) {
#           renderer ! Changed(subject, newState);
#         # } else {
#           # ()
#         # };
#         proxyFn(newState)
#       }
#     }
#   }

#   dispatcher ! Register(spawn { proxyFn(subject.model) });
#   subject
# }

# fun makeUselet (name, model, updateFun, renderFun)(addrSource) {
#   var (addr, gen) = makeAddr(addrSource);
#   attach((
#     name = name,
#     addr = addr,
#     model = model,
#     renderFun = renderFun,
#     updateFun = updateFun,
#     gen = gen
#   ))
# }



fun makeProcesses () {
  var renderer = spawnClient { rendererFun() };
  var dispatcher = spawnClient { dispatchFun([ ]) } `using` log("[Dispatcher]");
  (dispatcher, renderer)
}

fun makeEmitFun (d) {
  fun (msg) {
    d <! msg
  }
}

fun makeAttachFun (d, r) {
  fun (subject) {
    fun proxyFn (oldState) {
      receive {
        case msg -> {
          var newState = subject.updateFun(oldState, msg);
          r ! Changed(subject, newState);
          proxyFn(newState)
        }
      }
    }

    d ! Register(spawnClient { proxyFn(subject.model) });
    subject
  }
}

fun makeMakeUseletFun (attach) {
  fun (name, model, updateFun, renderFun)(addrSource) {
    var (addr, gen) = makeAddr(addrSource);
    attach((
      name = name,
      addr = addr,
      model = model,
      renderFun = renderFun,
      updateFun = updateFun,
      gen = gen
    ))
  }
}




# User code

# List example

typename ItemId = Int;
typename Item = (id: ItemId, body: String);
typename Error = String;

typename Model = (items: [Item], value: String);

typename ListMessage = [|
    Refresh
  | Data: Model
  | AddItem: String
  | AddSuccess: Item
  | DeleteItem: ItemId
  | DeleteSuccess: ItemId
  | APIError: String
|];

typename ListApiMessage = [| GetData | AddItem: String | DeleteItem: ItemId |];

# List API

# sig mockApiFun : ([Item], ItemId) {:ListApiMessage}~> (a::Any) ~> ()
fun mockApiFun (entries, idSeed)(emit) {
  receive {
    case GetData -> { emit(Data(entries)); mockApiFun(entries, idSeed)(emit) }
    case AddItem -> {
      var item = (id = idSeed, body = intToString(idSeed));
      emit(AddSuccess(item));
      mockApiFun(item :: entries, idSeed + 1)(emit)
    }
    case DeleteItem(id) -> {
      emit(DeleteSuccess(id));
      mockApiFun(filter(fun (e) { e.id <> id }, entries), idSeed)(emit)
    }
  }
}

# var apiService = spawn { mockApiFun([ ], 0) } `using` log("\x1b[32m[ListAPI]\x1b[0m\t");

# sig getData : () ~> [Item]
# fun getData () server {
#   for (e <-- entriesTable)
#     [ e ]
# }

# fun apiFun () client {
#   receive {
#     case GetData -> {
#       var data = getData();
#       emit(Data(data));
#       apiFun()
#     }
#   }
# }

# var apiService = spawn { apiFun() };



# Uselet definition

# sig listRenderFun : RenderFun(Model, ListMessage)
fun listRenderFun (emit)(model: Model) {
  <#>
    <input
      type="text"
      l:onkeyup="{ emit(ValueChanged(getTarget(event))) }"
      value="{ model.value }"
    />
    <button l:onclick="{ emit(AddItem) }">Add</button>
    <ul>
      {
        for (item <- model.items) {
          <#>
          <li>{ stringToXml(item.body) }</li>
          </#>
        }
      }
    </ul>
  </#>
}


# sig listUpdateFun : UpdateFun(Model, ListMessage)
fun listUpdateFun (services)(model: Model, msg) {
  switch (msg) {
    case ValueChanged(eventTarget) -> {
      var newValue = domGetAttributeFromRef(eventTarget, "value");
      ( model with value = newValue )
    }

    case Refresh -> { services.listApi ! GetData; model }
    case Data(data) -> ( model with items = data )

    case AddItem -> { services.listApi ! AddItem; model }
    case AddSuccess(item) -> ( model with items = item :: model.items )

    case DeleteItem(id) -> { services.listApi ! DeleteItem(id); model }
    case DeleteSuccess(id) -> ( model with items = filter(fun (i) { i.id <> id }, model.items) )

    case APIError(err) -> { error(err); model }

    case _ -> model
  }
}













fun uselet(name, model: Model, updt, view) {
  fun (addressSource, services, dispatcher, renderer) {
    var attach = makeAttachFun(dispatcher, renderer);
    fun emit (msg) {
      dispatcher <! msg
    }
    var (addr, gen) = makeAddr(addressSource);
    attach((
      name = name,
      addr = addr,
      model = model,
      renderFun = view(emit),
      updateFun = updt(services),
      gen = gen
    ))
  }
}


var listUselet = uselet("my-list-elem", (value="", items=[ ]): Model, listUpdateFun, listRenderFun);

fun services (emit) {
  (listApi = spawnClient { mockApiFun([ ], 0)(emit) } `using` log("[ListAPI]"))
}

fun useletPage (u, createServices) {
  var addrSource = addressInit;
  var (dispatcher, renderer) = makeProcesses();
  fun emit (msg) {
    print("Emit");
    dispatcher <! msg
  }
  var services = createServices(emit);
  var instance = u(addrSource, services, dispatcher, renderer);

  # page
  #   <div id="_render_node_0">
  #     <button l:onclick="{ emit(Refresh) }">Init</button>
  #   </div>


  instance.renderFun(instance.model)
}























fun main () {

  # addRoute("/u", fun (_, _) {
    useletPage(listUselet, services)
  # });

  # servePages()
}

main()



#     var (d, r) = makeProcesses();
#     var emit = makeEmitFun(d);
#     var attach = makeAttachFun(d, r);
#     var makeUselet = makeMakeUseletFun(attach);
#     var apiService = spawnClient { mockApiFun([ ], 0)(emit) } `using` log("[ListAPI]");
#     var listUselet = makeUselet("my-list-elem", (value="", items=[ ]), listUpdateFun(apiService), listRenderFun(emit));

#     var list1 = listUselet(addressInit);
#     var list2 = listUselet(list1.gen);

#     page
#       <#>
#         <div id="_render_node_0">
#           {
#             listRenderFun(emit)(list1.model)
#           }
#         </div>
#         <div id="_render_node_1">
#           {
#             listRenderFun(emit)(list2.model)
#           }
#         </div>
#       </#>



# Target syntax

# var listUselet = uselet
#   model (items = []: [Item], value: String)
#   update fun (model, msg) {
#     switch (msg) {
#       case ValueChanged(newValue) -> ( model with value = newValue )
#       case AddItem -> { listApiService ! APIAddItem(model.value); model }
#       case APIAddSuccess(item) -> ( model with items = item :: model.items )
#     }
#   }
#   view fun (model) {
#     <#>
#       <input
#         type="text"
#         l:onkeyup="{ send(ValueChanged(getInputValueFromRef(getTarget(event)))) }"
#         value="{ model.value }"
#       />
#       <button l:onclick="{ send(Additem) }">Add</button>
#       <ul>
#         {
#           for (item <- mode.items)
#             <li key="{ item.id }">{ stringToXml(item.body) }</li>
#         }
#       </ul>
#     </#>
#   }

# page
#   <#>
#     { listUselet }
#   </#>



# fun attach(subject) {

#   fun handler (model) {
#     receive {
#       case msg -> {
#         var newModel = subject.update(model, msg);

#         if (newModel <> model) {
#           renderer ! Changed(subject, newModel);
#         } else {
#           ()
#         };

#         handler(newState)
#       }
#     }
#   }

#   dispatcher ! Register(subject.addr, spawn { handler(subject.model) });

#   subject
# }

#               .
#               .
# +---------    .    +------------+       +------------+           +------+             +----------+
# | Server |    .    | ApiService |       | Dispatcher |           | List |             | Renderer |
# +--------+    .    +------------+       +------------+           +------+             +----------+
#    |          .          |                     |                     |                      |
#    |          .          |                     |                    _|_                    _|_
#    |          .          |                     |                   |   |-----Changed----->|  _|_
#    |          .          |                     |                   |___|                  | |   |-----+
#    |          .          |                     |                     |                    | |   |     |
#    |          .          |                     |                     |                    | |   |     | rerender
#    |          .          |                     |                     |                    | |   |     |
#    |          .          |                     |                     |                    | |___|<----+
#    |          .          |                     |                    _|_                   |___|
#    |          .          |                     |      --!Refresh-->|  _|_                   |
#    |          .          |                     |                   | |   |----+             |
#    |          .          |                     |                   | |   |    | updateFun   |
#    |          .         _|_                    |                   | |   |<---+             |
#   _|_         .        |   |<---!GetData-----------------------------|___|                  |
#  |   |<----getData-----|   |                   |                   |___|                    |
#  |   |        .        |   |                   |                     |                      |
#  |___|---------------->|   |                  _|_                    |                      |
#    |          .        |   |-----!Data------>|   |                  _|_                     |
#    |          .        |___|                 |   |-----!Data------>|  _|_                   |
#    |          .          |                   |___|                 | |   |----+             |
#    |          .          |                     |                   | |   |    | updateFun   |
#    |          .          |                     |                   | |___|<---+             |
#    |          .          |                     |                   |   |                   _|_
#    |          .          |                     |                   |   |-----Changed----->|  _|_
#    |          .          |                     |                   |___|                  | |   |-----+
#    |          .          |                     |                     |                    | |   |     |
#    |          .          |                     |                     |                    | |   |     | rerender
#    |          .          |                     |                     |                    | |   |     |
#    |          .          |                     |                     |                    | |___|<----+
#    |          .          |                     |                     |                    |___|
#    |          .          |                     |                     |                      |
#    |          .          |                     |                     |                      |
#    |          .          |                     |                     |                      |
